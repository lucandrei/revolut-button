{"version":3,"sources":["../node_modules/refractor/lang/soy.js","../node_modules/refractor/lang/markup-templating.js"],"names":["refractorMarkupTemplating","require","soy","Prism","register","stringPattern","numberPattern","languages","comment","pattern","lookbehind","greedy","alias","inside","punctuation","parameter","keyword","delimiter","property","variable","string","number","function","boolean","operator","hooks","add","env","soyLitteralMode","buildPlaceholders","match","tokenizePlaceholders","module","exports","displayName","aliases","markupTemplating","getPlaceholder","language","index","toUpperCase","Object","defineProperties","value","placeholderPattern","replaceFilter","tokenStack","code","replace","placeholder","i","length","indexOf","grammar","markup","j","keys","walkTokens","tokens","token","content","k","t","s","before","substring","middle","Token","tokenize","after","replacement","push","apply","splice","concat"],"mappings":"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","file":"static/js/react-syntax-highlighter_languages_refractor_soy.dc4a4707.chunk.js","sourcesContent":["'use strict'\nvar refractorMarkupTemplating = require('./markup-templating.js')\nmodule.exports = soy\nsoy.displayName = 'soy'\nsoy.aliases = []\nfunction soy(Prism) {\n  Prism.register(refractorMarkupTemplating)\n  ;(function(Prism) {\n    var stringPattern = /([\"'])(?:\\\\(?:\\r\\n|[\\s\\S])|(?!\\1)[^\\\\\\r\\n])*\\1/\n    var numberPattern = /\\b\\d+(?:\\.\\d+)?(?:[eE][+-]?\\d+)?\\b|\\b0x[\\dA-F]+\\b/\n    Prism.languages.soy = {\n      comment: [\n        /\\/\\*[\\s\\S]*?\\*\\//,\n        {\n          pattern: /(\\s)\\/\\/.*/,\n          lookbehind: true,\n          greedy: true\n        }\n      ],\n      'command-arg': {\n        pattern: /({+\\/?\\s*(?:alias|call|delcall|delpackage|deltemplate|namespace|template)\\s+)\\.?[\\w.]+/,\n        lookbehind: true,\n        alias: 'string',\n        inside: {\n          punctuation: /\\./\n        }\n      },\n      parameter: {\n        pattern: /({+\\/?\\s*@?param\\??\\s+)\\.?[\\w.]+/,\n        lookbehind: true,\n        alias: 'variable'\n      },\n      keyword: [\n        {\n          pattern: /({+\\/?[^\\S\\r\\n]*)(?:\\\\[nrt]|alias|call|case|css|default|delcall|delpackage|deltemplate|else(?:if)?|fallbackmsg|for(?:each)?|if(?:empty)?|lb|let|literal|msg|namespace|nil|@?param\\??|rb|sp|switch|template|xid)/,\n          lookbehind: true\n        },\n        /\\b(?:any|as|attributes|bool|css|float|in|int|js|html|list|map|null|number|string|uri)\\b/\n      ],\n      delimiter: {\n        pattern: /^{+\\/?|\\/?}+$/,\n        alias: 'punctuation'\n      },\n      property: /\\w+(?==)/,\n      variable: {\n        pattern: /\\$[^\\W\\d]\\w*(?:\\??(?:\\.\\w+|\\[[^\\]]+]))*/,\n        inside: {\n          string: {\n            pattern: stringPattern,\n            greedy: true\n          },\n          number: numberPattern,\n          punctuation: /[\\[\\].?]/\n        }\n      },\n      string: {\n        pattern: stringPattern,\n        greedy: true\n      },\n      function: [\n        /\\w+(?=\\()/,\n        {\n          pattern: /(\\|[^\\S\\r\\n]*)\\w+/,\n          lookbehind: true\n        }\n      ],\n      boolean: /\\b(?:true|false)\\b/,\n      number: numberPattern,\n      operator: /\\?:?|<=?|>=?|==?|!=|[+*/%-]|\\b(?:and|not|or)\\b/,\n      punctuation: /[{}()\\[\\]|.,:]/\n    } // Tokenize all inline Soy expressions\n    Prism.hooks.add('before-tokenize', function(env) {\n      var soyPattern = /{{.+?}}|{.+?}|\\s\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\//g\n      var soyLitteralStart = '{literal}'\n      var soyLitteralEnd = '{/literal}'\n      var soyLitteralMode = false\n      Prism.languages['markup-templating'].buildPlaceholders(\n        env,\n        'soy',\n        soyPattern,\n        function(match) {\n          // Soy tags inside {literal} block are ignored\n          if (match === soyLitteralEnd) {\n            soyLitteralMode = false\n          }\n          if (!soyLitteralMode) {\n            if (match === soyLitteralStart) {\n              soyLitteralMode = true\n            }\n            return true\n          }\n          return false\n        }\n      )\n    }) // Re-insert the tokens after tokenizing\n    Prism.hooks.add('after-tokenize', function(env) {\n      Prism.languages['markup-templating'].tokenizePlaceholders(env, 'soy')\n    })\n  })(Prism)\n}\n","'use strict'\n\nmodule.exports = markupTemplating\nmarkupTemplating.displayName = 'markupTemplating'\nmarkupTemplating.aliases = []\nfunction markupTemplating(Prism) {\n  ;(function(Prism) {\n    /**\n     * Returns the placeholder for the given language id and index.\n     *\n     * @param {string} language\n     * @param {string|number} index\n     * @returns {string}\n     */\n    function getPlaceholder(language, index) {\n      return '___' + language.toUpperCase() + index + '___'\n    }\n    Object.defineProperties((Prism.languages['markup-templating'] = {}), {\n      buildPlaceholders: {\n        /**\n         * Tokenize all inline templating expressions matching `placeholderPattern`.\n         *\n         * If `replaceFilter` is provided, only matches of `placeholderPattern` for which `replaceFilter` returns\n         * `true` will be replaced.\n         *\n         * @param {object} env The environment of the `before-tokenize` hook.\n         * @param {string} language The language id.\n         * @param {RegExp} placeholderPattern The matches of this pattern will be replaced by placeholders.\n         * @param {(match: string) => boolean} [replaceFilter]\n         */\n        value: function(env, language, placeholderPattern, replaceFilter) {\n          if (env.language !== language) {\n            return\n          }\n          var tokenStack = (env.tokenStack = [])\n          env.code = env.code.replace(placeholderPattern, function(match) {\n            if (typeof replaceFilter === 'function' && !replaceFilter(match)) {\n              return match\n            }\n            var i = tokenStack.length\n            var placeholder // Check for existing strings\n            while (\n              env.code.indexOf((placeholder = getPlaceholder(language, i))) !==\n              -1\n            )\n              ++i // Create a sparse array\n            tokenStack[i] = match\n            return placeholder\n          }) // Switch the grammar to markup\n          env.grammar = Prism.languages.markup\n        }\n      },\n      tokenizePlaceholders: {\n        /**\n         * Replace placeholders with proper tokens after tokenizing.\n         *\n         * @param {object} env The environment of the `after-tokenize` hook.\n         * @param {string} language The language id.\n         */\n        value: function(env, language) {\n          if (env.language !== language || !env.tokenStack) {\n            return\n          } // Switch the grammar back\n          env.grammar = Prism.languages[language]\n          var j = 0\n          var keys = Object.keys(env.tokenStack)\n          function walkTokens(tokens) {\n            for (var i = 0; i < tokens.length; i++) {\n              // all placeholders are replaced already\n              if (j >= keys.length) {\n                break\n              }\n              var token = tokens[i]\n              if (\n                typeof token === 'string' ||\n                (token.content && typeof token.content === 'string')\n              ) {\n                var k = keys[j]\n                var t = env.tokenStack[k]\n                var s = typeof token === 'string' ? token : token.content\n                var placeholder = getPlaceholder(language, k)\n                var index = s.indexOf(placeholder)\n                if (index > -1) {\n                  ++j\n                  var before = s.substring(0, index)\n                  var middle = new Prism.Token(\n                    language,\n                    Prism.tokenize(t, env.grammar),\n                    'language-' + language,\n                    t\n                  )\n                  var after = s.substring(index + placeholder.length)\n                  var replacement = []\n                  if (before) {\n                    replacement.push.apply(replacement, walkTokens([before]))\n                  }\n                  replacement.push(middle)\n                  if (after) {\n                    replacement.push.apply(replacement, walkTokens([after]))\n                  }\n                  if (typeof token === 'string') {\n                    tokens.splice.apply(tokens, [i, 1].concat(replacement))\n                  } else {\n                    token.content = replacement\n                  }\n                }\n              } else if (\n                token.content\n                /* && typeof token.content !== 'string' */\n              ) {\n                walkTokens(token.content)\n              }\n            }\n            return tokens\n          }\n          walkTokens(env.tokens)\n        }\n      }\n    })\n  })(Prism)\n}\n"],"sourceRoot":""}